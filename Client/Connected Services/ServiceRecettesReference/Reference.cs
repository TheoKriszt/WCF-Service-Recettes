//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.42000
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Client.ServiceRecettesReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceRecettesReference.IService")]
    public interface IService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getRecipes", ReplyAction="http://tempuri.org/IService/getRecipesResponse")]
        Shared.Classes.Recette[] getRecipes(int clientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getRecipes", ReplyAction="http://tempuri.org/IService/getRecipesResponse")]
        System.Threading.Tasks.Task<Shared.Classes.Recette[]> getRecipesAsync(int clientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getRecipeByName", ReplyAction="http://tempuri.org/IService/getRecipeByNameResponse")]
        Shared.Classes.Recette getRecipeByName(string name, int clientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getRecipeByName", ReplyAction="http://tempuri.org/IService/getRecipeByNameResponse")]
        System.Threading.Tasks.Task<Shared.Classes.Recette> getRecipeByNameAsync(string name, int clientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getRecipeByIngredientName", ReplyAction="http://tempuri.org/IService/getRecipeByIngredientNameResponse")]
        Shared.Classes.Recette[] getRecipeByIngredientName(string name, int clientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getRecipeByIngredientName", ReplyAction="http://tempuri.org/IService/getRecipeByIngredientNameResponse")]
        System.Threading.Tasks.Task<Shared.Classes.Recette[]> getRecipeByIngredientNameAsync(string name, int clientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/AddRecipe", ReplyAction="http://tempuri.org/IService/AddRecipeResponse")]
        bool AddRecipe(Shared.Classes.Recette recette);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/AddRecipe", ReplyAction="http://tempuri.org/IService/AddRecipeResponse")]
        System.Threading.Tasks.Task<bool> AddRecipeAsync(Shared.Classes.Recette recette);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/AddIngredient", ReplyAction="http://tempuri.org/IService/AddIngredientResponse")]
        bool AddIngredient(string recipeName, Shared.Classes.Ingredient ingredient);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/AddIngredient", ReplyAction="http://tempuri.org/IService/AddIngredientResponse")]
        System.Threading.Tasks.Task<bool> AddIngredientAsync(string recipeName, Shared.Classes.Ingredient ingredient);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/ReplaceIngredient", ReplyAction="http://tempuri.org/IService/ReplaceIngredientResponse")]
        bool ReplaceIngredient(string recipeName, Shared.Classes.Ingredient ingredient, Shared.Classes.Ingredient replacement);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/ReplaceIngredient", ReplyAction="http://tempuri.org/IService/ReplaceIngredientResponse")]
        System.Threading.Tasks.Task<bool> ReplaceIngredientAsync(string recipeName, Shared.Classes.Ingredient ingredient, Shared.Classes.Ingredient replacement);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/RemoveRecipe", ReplyAction="http://tempuri.org/IService/RemoveRecipeResponse")]
        bool RemoveRecipe(string recipeName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/RemoveRecipe", ReplyAction="http://tempuri.org/IService/RemoveRecipeResponse")]
        System.Threading.Tasks.Task<bool> RemoveRecipeAsync(string recipeName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/RemoveFromCurrentSelection", ReplyAction="http://tempuri.org/IService/RemoveFromCurrentSelectionResponse")]
        bool RemoveFromCurrentSelection(string name, int clientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/RemoveFromCurrentSelection", ReplyAction="http://tempuri.org/IService/RemoveFromCurrentSelectionResponse")]
        System.Threading.Tasks.Task<bool> RemoveFromCurrentSelectionAsync(string name, int clientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetSelection", ReplyAction="http://tempuri.org/IService/GetSelectionResponse")]
        Shared.Classes.Recette[] GetSelection(int clientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetSelection", ReplyAction="http://tempuri.org/IService/GetSelectionResponse")]
        System.Threading.Tasks.Task<Shared.Classes.Recette[]> GetSelectionAsync(int clientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SaveCurrentSelection", ReplyAction="http://tempuri.org/IService/SaveCurrentSelectionResponse")]
        void SaveCurrentSelection(int clientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SaveCurrentSelection", ReplyAction="http://tempuri.org/IService/SaveCurrentSelectionResponse")]
        System.Threading.Tasks.Task SaveCurrentSelectionAsync(int clientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/OpenConnexion", ReplyAction="http://tempuri.org/IService/OpenConnexionResponse")]
        int OpenConnexion();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/OpenConnexion", ReplyAction="http://tempuri.org/IService/OpenConnexionResponse")]
        System.Threading.Tasks.Task<int> OpenConnexionAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/CloseConnexion", ReplyAction="http://tempuri.org/IService/CloseConnexionResponse")]
        void CloseConnexion(int clientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/CloseConnexion", ReplyAction="http://tempuri.org/IService/CloseConnexionResponse")]
        System.Threading.Tasks.Task CloseConnexionAsync(int clientId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceChannel : Client.ServiceRecettesReference.IService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceClient : System.ServiceModel.ClientBase<Client.ServiceRecettesReference.IService>, Client.ServiceRecettesReference.IService {
        
        public ServiceClient() {
        }
        
        public ServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public Shared.Classes.Recette[] getRecipes(int clientId) {
            return base.Channel.getRecipes(clientId);
        }
        
        public System.Threading.Tasks.Task<Shared.Classes.Recette[]> getRecipesAsync(int clientId) {
            return base.Channel.getRecipesAsync(clientId);
        }
        
        public Shared.Classes.Recette getRecipeByName(string name, int clientId) {
            return base.Channel.getRecipeByName(name, clientId);
        }
        
        public System.Threading.Tasks.Task<Shared.Classes.Recette> getRecipeByNameAsync(string name, int clientId) {
            return base.Channel.getRecipeByNameAsync(name, clientId);
        }
        
        public Shared.Classes.Recette[] getRecipeByIngredientName(string name, int clientId) {
            return base.Channel.getRecipeByIngredientName(name, clientId);
        }
        
        public System.Threading.Tasks.Task<Shared.Classes.Recette[]> getRecipeByIngredientNameAsync(string name, int clientId) {
            return base.Channel.getRecipeByIngredientNameAsync(name, clientId);
        }
        
        public bool AddRecipe(Shared.Classes.Recette recette) {
            return base.Channel.AddRecipe(recette);
        }
        
        public System.Threading.Tasks.Task<bool> AddRecipeAsync(Shared.Classes.Recette recette) {
            return base.Channel.AddRecipeAsync(recette);
        }
        
        public bool AddIngredient(string recipeName, Shared.Classes.Ingredient ingredient) {
            return base.Channel.AddIngredient(recipeName, ingredient);
        }
        
        public System.Threading.Tasks.Task<bool> AddIngredientAsync(string recipeName, Shared.Classes.Ingredient ingredient) {
            return base.Channel.AddIngredientAsync(recipeName, ingredient);
        }
        
        public bool ReplaceIngredient(string recipeName, Shared.Classes.Ingredient ingredient, Shared.Classes.Ingredient replacement) {
            return base.Channel.ReplaceIngredient(recipeName, ingredient, replacement);
        }
        
        public System.Threading.Tasks.Task<bool> ReplaceIngredientAsync(string recipeName, Shared.Classes.Ingredient ingredient, Shared.Classes.Ingredient replacement) {
            return base.Channel.ReplaceIngredientAsync(recipeName, ingredient, replacement);
        }
        
        public bool RemoveRecipe(string recipeName) {
            return base.Channel.RemoveRecipe(recipeName);
        }
        
        public System.Threading.Tasks.Task<bool> RemoveRecipeAsync(string recipeName) {
            return base.Channel.RemoveRecipeAsync(recipeName);
        }
        
        public bool RemoveFromCurrentSelection(string name, int clientId) {
            return base.Channel.RemoveFromCurrentSelection(name, clientId);
        }
        
        public System.Threading.Tasks.Task<bool> RemoveFromCurrentSelectionAsync(string name, int clientId) {
            return base.Channel.RemoveFromCurrentSelectionAsync(name, clientId);
        }
        
        public Shared.Classes.Recette[] GetSelection(int clientId) {
            return base.Channel.GetSelection(clientId);
        }
        
        public System.Threading.Tasks.Task<Shared.Classes.Recette[]> GetSelectionAsync(int clientId) {
            return base.Channel.GetSelectionAsync(clientId);
        }
        
        public void SaveCurrentSelection(int clientId) {
            base.Channel.SaveCurrentSelection(clientId);
        }
        
        public System.Threading.Tasks.Task SaveCurrentSelectionAsync(int clientId) {
            return base.Channel.SaveCurrentSelectionAsync(clientId);
        }
        
        public int OpenConnexion() {
            return base.Channel.OpenConnexion();
        }
        
        public System.Threading.Tasks.Task<int> OpenConnexionAsync() {
            return base.Channel.OpenConnexionAsync();
        }
        
        public void CloseConnexion(int clientId) {
            base.Channel.CloseConnexion(clientId);
        }
        
        public System.Threading.Tasks.Task CloseConnexionAsync(int clientId) {
            return base.Channel.CloseConnexionAsync(clientId);
        }
    }
}
